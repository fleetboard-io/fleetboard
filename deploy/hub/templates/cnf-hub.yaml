---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.cluster.sharenamespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cnf-nauti
  namespace: nauti-system
  labels:
    app: cnf-nauti
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cnf-nauti
  template:
    metadata:
      labels:
        app: cnf-nauti
        router.nauti.io/cnf: "true"
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      hostNetwork: false
      containers:
        - name: cnf
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}/cnf:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
            privileged: true
          command:
            - /cnf/cnf
          args:
            - --as-hub={{ .Values.cluster.hub }}
            - --cidr={{ .Values.tunnel.cidr }}
            - --as-cluster=false
            - --shared-namespace=syncer-operator
          env:
            - name: NAUTI_CLUSTERID
              value: {{ .Values.cluster.clusterID }}
            - name: NAUTI_ENDPOINT
              value: {{ .Values.tunnel.endpoint }}
            - name: NAUTI_PODNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAUTI_PODNAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/run/netns
              mountPropagation: Bidirectional
              name: host-ns
            - mountPath: /var/run/nri
              mountPropagation: HostToContainer
              name: host-nri
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      securityContext: { }
      terminationGracePeriodSeconds: 30
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
      volumes:
        - hostPath:
            path: /var/run/netns
            type: ""
          name: host-ns
        - hostPath:
            path: /var/run/nri
            type: DirectoryOrCreate
          name: host-nri